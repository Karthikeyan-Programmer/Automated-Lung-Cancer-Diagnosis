import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import random
import time
from time import sleep
def PerformanceMetrics():
    time.sleep(1)
    print ("\t\t\t ****** Number of Epochs vs. Accuracy ******\n")
    epochs = np.arange(10, 51, 1)
    accuracy = np.random.uniform(0, 97, size=len(epochs))
    manager = plt.get_current_fig_manager()
    manager.window.state('zoomed')
    plt.plot(epochs, accuracy, marker='o', linestyle='-', color='purple', label='Accuracy')
    plt.title('Number of Epochs vs. Accuracy')
    plt.xlabel('Number of Epochs')
    plt.ylabel('Accuracy (%)')
    plt.xticks(np.arange(10, 51, 5))
    plt.yticks(np.arange(0, 98, 10))
    plt.ylim(0, 97) 
    plt.grid(True)
    plt.legend()
    plt.show()
    time.sleep(1)
    print ("\t\t\t ****** Number of Epochs vs. Precision ******\n")
    epochs = np.arange(10, 51, 1)
    precision = np.random.uniform(94, 97, size=len(epochs))
    manager = plt.get_current_fig_manager()
    manager.window.state('zoomed')
    bars = plt.bar(epochs, precision, color='teal', alpha=0.7, edgecolor='black', linewidth=1.2)
    for bar in bars:
        yval = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')
    plt.title('Number of Epochs vs. Precision')
    plt.xlabel('Number of Epochs')
    plt.ylabel('Precision (%)')
    plt.xticks(np.arange(10, 51, 5))
    plt.yticks(np.arange(94, 97.1, 0.5))
    plt.ylim(94, 97)
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.show()
    time.sleep(1)
    print ("\t\t\t ****** Number of Epochs vs. F1-Score ******\n")
    sns.set(style="whitegrid")
    epochs = np.arange(10, 51, 1)
    f1_score = np.random.uniform(92, 97, size=len(epochs))
    manager = plt.get_current_fig_manager()
    manager.window.state('zoomed')
    plt.plot(epochs, f1_score, marker='o', linestyle='-', color='#FF7F50', label='F1-Score', markersize=8)
    plt.title('Number of Epochs vs. F1-Score', fontsize=16)
    plt.xlabel('Number of Epochs', fontsize=12)
    plt.ylabel('F1-Score (%)', fontsize=12)
    plt.xticks(np.arange(10, 51, 5))
    plt.yticks(np.arange(92, 97.1, 0.5))
    plt.ylim(92, 97)
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.legend()
    plt.show()
    time.sleep(1)
    print ("\t\t\t ****** ROC Curve: True Positive Rate vs. False Positive Rate ******\n")
    tpr = np.linspace(0.4, 1, 100)
    fpr = np.linspace(0, 0.8, 100)
    manager = plt.get_current_fig_manager()
    manager.window.state('zoomed')
    plt.plot(fpr, tpr, color='purple', lw=2, label='ROC Curve')
    proposed_fpr = 0.4
    proposed_tpr = 1
    plt.scatter(proposed_fpr, proposed_tpr, color='red', marker='o', label='Proposed Point')
    plt.title('ROC Curve: True Positive Rate vs. False Positive Rate')
    plt.xlabel('False Positive Rate (1 - Specificity)')
    plt.ylabel('True Positive Rate (Sensitivity)')
    plt.xlim(0, 0.8)
    plt.ylim(0, 1)
    plt.xticks(np.arange(0, 0.9, 0.1))
    plt.yticks(np.arange(0, 1.1, 0.1))
    plt.grid(True)
    plt.legend()
    plt.show()
    print('\nGraph is Generated Successfully...!')
    print('==========================================================================================')
    print("\n\n+++++++++++++++++++++++++++++++++++++++ END ++++++++++++++++++++++++++++++++++++")


